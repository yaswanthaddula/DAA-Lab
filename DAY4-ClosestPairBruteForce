import math
def euclidean_distance(p1, p2):
    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)
def closest_pair(points):
    min_distance = float('inf')
    closest_points = None
    for i in range(len(points)):
        for j in range(i + 1, len(points)):
            dist = euclidean_distance(points[i], points[j])
            if dist < min_distance:
                min_distance = dist
                closest_points = (points[i], points[j])
    return closest_points, min_distance
def cross(o, a, b):
    return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0])
def convex_hull(points):
    n = len(points)
    if n < 3:
        return points
    leftmost = min(points, key=lambda p: p[0])
    hull = []
    point = leftmost
    while True:
        hull.append(point)
        next_point = points[0]
        for candidate in points:
            if candidate == point:
                continue
            if next_point == point or cross(point, next_point, candidate) > 0:
                next_point = candidate
        point = next_point
        if point == leftmost:
            break
    return hull
points_for_closest_pair = [(1, 2), (4, 5), (7, 8), (3, 1)]
closest_points, min_distance = closest_pair(points_for_closest_pair)
print(f"Closest pair: {closest_points}")
print(f"Minimum distance: {min_distance}")
points_for_convex_hull = [(10, 0), (11, 5), (5, 3), (9, 3.5), (15, 3), (12.5, 7), (6, 6.5), (7.5, 4.5)]
hull_points = convex_hull(points_for_convex_hull)
print("Convex Hull Points:", hull_points)
